{
    "version": "2407.24",
    "description": "This is a fun, new monospaced font that includes programming ligatures and is designed to enhance the modern look and feel of the Windows Terminal.",
    "homepage": "https://github.com/microsoft/cascadia-code",
    "license": "OFL-1.1-RFN",
    "url": "https://github.com/microsoft/cascadia-code/releases/download/v2407.24/CascadiaCode-2407.24.zip",
    "hash": "e67a68ee3386db63f48b9054bd196ea752bc6a4ebb4df35adce6733da50c8474",
    "extract_dir": "ttf/static",
    "installer": {
        "script": [
            "$filter = 'CascadiaCodePL-.*\\.ttf'",
            "Add-Type -AssemblyName PresentationCore, WindowsBase",
            "$fontDir = if ($global) { \"${env:WINDIR}\\Fonts\" } else { \"${env:LOCALAPPDATA}\\Microsoft\\Windows\\Fonts\" }",
            "$regDrive = if ($global) { 'HKLM:' } else { 'HKCU:' }",
            "$regKey = \"$regDrive\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\"",
            "$files = Get-ChildItem $dir -Recurse -File | Where-Object { $_.Name -match '\\.(ttf|otf|woff|woff2|eot|svg|svgz)$' } | Where-Object { $_.Name -match $filter }",
            "if ($files.Count -eq 0) {",
            "    throw 'Failed to find fonts to install. Please recheck the filter.'",
            "}",
            "$junk = Get-ChildItem $dir -Recurse -File | Where-Object { $_.Name -match '\\.(ttf|otf|woff|woff2|eot|svg|svgz)$' } | Where-Object { $_.Name -notmatch $filter }",
            "foreach ($file in $junk) {",
            "    Remove-Item -Force -Path $file.FullName -ErrorAction SilentlyContinue",
            "}",
            "$fonts = @()",
            "foreach ($file in $files) {",
            "    if (-not ($file.Name -match '\\.(ttf|otf)$')) {",
            "        throw 'Unsupported font format. Please use TTF or OTF files.'",
            "    }",
            "    $fileUri = [uri]::new($file.FullName)",
            "    $glyphTypeface = $null",
            "    $regValueName = $null",
            "    try {",
            "        $glyphTypeface = [System.Windows.Media.GlyphTypeface]::new($fileUri)",
            "        if ($null -ne $glyphTypeface) {",
            "            $culture = [System.Globalization.CultureInfo]::CurrentCulture",
            "            $fontFamilyName = $null",
            "            if (($null -ne $glyphTypeface.FamilyNames) -and ($glyphTypeface.FamilyNames.Count -ne 0)) {",
            "                if ($glyphTypeface.FamilyNames.ContainsKey($culture.LCID)) {",
            "                    $fontFamilyName = $glyphTypeface.FamilyNames[$culture.LCID]",
            "                } elseif ($glyphTypeface.FamilyNames.ContainsKey(0x0409)) {",
            "                    $fontFamilyName = $glyphTypeface.FamilyNames[0x0409] # en-US",
            "                }",
            "            }",
            "            $fontFaceName = $null",
            "            if (($null -ne $glyphTypeface.FaceNames) -and ($glyphTypeface.FaceNames.Count -ne 0)) {",
            "                if ($glyphTypeface.FaceNames.ContainsKey($culture.LCID)) {",
            "                    $fontFaceName = $glyphTypeface.FaceNames[$culture.LCID]",
            "                } elseif ($glyphTypeface.FaceNames.ContainsKey(0x0409)) {",
            "                    $fontFaceName = $glyphTypeface.FaceNames[0x0409] # en-US",
            "                }",
            "            }",
            "            if (($null -ne $fontFamilyName) -and ($null -ne $fontFaceName)) {",
            "                $fontFamilyName = $fontFamilyName.Trim()",
            "                $fontFaceName = $fontFaceName.Trim()",
            "                $regValueName = \"$fontFamilyName $fontFaceName (TrueType)\"",
            "            }",
            "        }",
            "    } finally {",
            "        $glyphTypeface = $null",
            "        [System.GC]::Collect()",
            "        [System.GC]::WaitForPendingFinalizers()",
            "    }",
            "    if ($null -eq $regValueName) {",
            "        Write-Warning \"Could not determine font family name from metadata; using filename instead.\"",
            "        $regValueName = $file.BaseName -replace '[-_]+', ' '",
            "    }",
            "    $font = [PSCustomObject]@{",
            "        File     = $file",
            "        Registry = $regValueName",
            "        Success  = $false",
            "    }",
            "    $fonts += $font",
            "    $fontPath = \"$fontDir\\$($file.Name)\"",
            "    $regValueData = if ($global) { $file.Name } else { $fontPath }",
            "    if (Test-Path $fontPath) {",
            "        [System.GC]::Collect()",
            "        [System.GC]::WaitForPendingFinalizers()",
            "        [System.GC]::Collect()",
            "        try {",
            "            Remove-Item -Path $fontPath -Force -ErrorAction Stop",
            "            Start-Sleep -Milliseconds 100  # Give Windows a moment to release the file handle",
            "        } catch {",
            "            Write-Host \"Failed to remove font: $fontPath; $($_.Exception.Message)\" -ForegroundColor Red",
            "            continue",
            "        }",
            "    }",
            "    Copy-Item -Force -Path $file.FullName -Destination $fontDir -ErrorAction Stop",
            "    $existingKey = Get-ItemProperty -Path $regKey -Name $regValueName -ErrorAction SilentlyContinue",
            "    if ($null -eq $existingKey) {",
            "        New-ItemProperty -Force -Path $regKey -Name $regValueName -Value $regValueData -PropertyType String -ErrorAction Stop | Out-Null",
            "    } else {",
            "        Set-ItemProperty -Force -Path $regKey -Name $regValueName -Value $regValueData -ErrorAction Stop | Out-Null",
            "    }",
            "    $font.Success = $true",
            "}",
            "if ($fonts.Count -gt 0) {",
            "    $fonts | Select-Object @{Name = 'Font'; Expression = { $_.File.Name } }, Registry, Success | Format-Table -AutoSize",
            "}"
        ]
    },
    "uninstaller": {
        "script": [
            "$filter = 'CascadiaCodePL-.*\\.ttf'",
            "Add-Type -AssemblyName PresentationCore, WindowsBase",
            "$fontDir = if ($global) { \"${env:WINDIR}\\Fonts\" } else { \"${env:LOCALAPPDATA}\\Microsoft\\Windows\\Fonts\" }",
            "$regDrive = if ($global) { 'HKLM:' } else { 'HKCU:' }",
            "$regKey = \"$regDrive\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\"",
            "$files = Get-ChildItem $dir -Recurse -File | Where-Object { $_.Name -match '\\.(ttf|otf|woff|woff2|eot|svg|svgz)$' } | Where-Object { $_.Name -match $filter }",
            "if ($files.Count -eq 0) {",
            "    throw 'Failed to find fonts to install. Please recheck the filter.'",
            "}",
            "$fonts = @()",
            "foreach ($file in $files) {",
            "    if (-not ($file.Name -match '\\.(ttf|otf)$')) {",
            "        throw 'Unsupported font format. Please use TTF or OTF files.'",
            "    }",
            "    $fileUri = [uri]::new($file.FullName)",
            "    $glyphTypeface = $null",
            "    $regValueName = $null",
            "    try {",
            "        $glyphTypeface = [System.Windows.Media.GlyphTypeface]::new($fileUri)",
            "        if ($null -ne $glyphTypeface) {",
            "            $culture = [System.Globalization.CultureInfo]::CurrentCulture",
            "            $fontFamilyName = $null",
            "            if (($null -ne $glyphTypeface.FamilyNames) -and ($glyphTypeface.FamilyNames.Count -ne 0)) {",
            "                if ($glyphTypeface.FamilyNames.ContainsKey($culture.LCID)) {",
            "                    $fontFamilyName = $glyphTypeface.FamilyNames[$culture.LCID]",
            "                } elseif ($glyphTypeface.FamilyNames.ContainsKey(0x0409)) {",
            "                    $fontFamilyName = $glyphTypeface.FamilyNames[0x0409] # en-US",
            "                }",
            "            }",
            "            $fontFaceName = $null",
            "            if (($null -ne $glyphTypeface.FaceNames) -and ($glyphTypeface.FaceNames.Count -ne 0)) {",
            "                if ($glyphTypeface.FaceNames.ContainsKey($culture.LCID)) {",
            "                    $fontFaceName = $glyphTypeface.FaceNames[$culture.LCID]",
            "                } elseif ($glyphTypeface.FaceNames.ContainsKey(0x0409)) {",
            "                    $fontFaceName = $glyphTypeface.FaceNames[0x0409] # en-US",
            "                }",
            "            }",
            "            if (($null -ne $fontFamilyName) -and ($null -ne $fontFaceName)) {",
            "                $fontFamilyName = $fontFamilyName.Trim()",
            "                $fontFaceName = $fontFaceName.Trim()",
            "                $regValueName = \"$fontFamilyName $fontFaceName (TrueType)\"",
            "            }",
            "        }",
            "    } finally {",
            "        $glyphTypeface = $null",
            "        [System.GC]::Collect()",
            "        [System.GC]::WaitForPendingFinalizers()",
            "    }",
            "    $font = [PSCustomObject]@{",
            "        File     = $file",
            "        Registry = $regValueName",
            "        Success  = $false",
            "    }",
            "    $fonts += $font",
            "    $fontPath = \"$fontDir\\$($file.Name)\"",
            "    if (Test-Path $fontPath) {",
            "        [System.GC]::Collect()",
            "        [System.GC]::WaitForPendingFinalizers()",
            "        [System.GC]::Collect()",
            "        try {",
            "            Remove-Item -Path $fontPath -Force -ErrorAction Stop",
            "            Start-Sleep -Milliseconds 100  # Give Windows a moment to release the file handle",
            "        } catch {",
            "            Write-Host \"Failed to remove font: $fontPath; $($_.Exception.Message)\" -ForegroundColor Red",
            "            continue",
            "        }",
            "    }",
            "    Remove-ItemProperty -Path $regKey -Name $regValueName -ErrorAction Stop",
            "    $font.Success = $true",
            "}",
            "if ($fonts.Count -gt 0) {",
            "    $fonts | Select-Object @{Name = 'Font'; Expression = { $_.File.Name } }, Registry, Success | Format-Table -AutoSize",
            "}"
        ]
    },
    "checkver": {
        "url": "https://api.github.com/repos/microsoft/cascadia-code/releases",
        "jsonpath": "$[*].assets[*].browser_download_url",
        "regex": "/v?([\\d.]+)/.*.zip"
    },
    "autoupdate": {
        "url": "https://github.com/microsoft/cascadia-code/releases/download/v$version/CascadiaCode-$version.zip"
    }
}
