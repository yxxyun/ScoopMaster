{
    "version": "20241208",
    "description": "A software distro and building platform for Windows",
    "homepage": "https://www.msys2.org",
    "license": "GPL-2.0-only|BSD-3-Clause",
    "architecture": {
        "64bit": {
            "url": "https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/msys2-base-x86_64-20241208.tar.xz",
            "hash": "dfaed9ee4e1a28c24ed06edbb0767846a1022eb3ec849d70b2b999129e472135",
            "extract_dir": "msys64"
        }
    },
    "pre_install": [
        "# Git-wrap.bat",
        "Set-Content -Value \"@echo off`nsetlocal`nrem If you don't add path for msys2 into %PATH%, enable following line.`nset PATH=$dir\\usr\\bin;%PATH%`nif `\"%1`\" equ `\"rev-parse`\" goto rev_parse`ngit %*`ngoto :eof`n:rev_parse`nfor /f %%1 in ('git %*') do cygpath -w %%1\" -Path \"$dir\\git.bat\""
    ],
    "installer": {
        "script": [
            "# Force home dir to windows USERPROFILE",
            "$homeDirControl = \"$dir\\etc\\nsswitch.conf\"",
            "(Get-Content $homeDirControl) -replace 'db_home: cygwin desc', 'db_home: windows' | Set-Content $homeDirControl",
            "# Insert the Invoke-ExternalCommand2 function here",
            "function Invoke-ExternalCommand2 {",
            "    [CmdletBinding(DefaultParameterSetName = \"Default\")]",
            "    [OutputType([Boolean])]",
            "    param (",
            "        [Parameter(Mandatory = $true,",
            "                   Position = 0)]",
            "        [Alias(\"Path\")]",
            "        [ValidateNotNullOrEmpty()]",
            "        [String]",
            "        $FilePath,",
            "        [Parameter(Position = 1)]",
            "        [Alias(\"Args\")]",
            "        [String[]]",
            "        $ArgumentList,",
            "        [Parameter(ParameterSetName = \"UseShellExecute\")]",
            "        [Switch]",
            "        $RunAs,",
            "        [Alias(\"Msg\")]",
            "        [String]",
            "        $Activity,",
            "        [Alias(\"cec\")]",
            "        [Hashtable]",
            "        $ContinueExitCodes,",
            "        [Parameter(ParameterSetName = \"Default\")]",
            "        [Alias(\"Log\")]",
            "        [String]",
            "        $LogPath",
            "    )",
            "    if ($Activity) {",
            "        Write-Host \"$Activity \" -NoNewline",
            "    }",
            "    $Process = New-Object System.Diagnostics.Process",
            "    $Process.StartInfo.FileName = $FilePath",
            "    $Process.StartInfo.UseShellExecute = $false",
            "    if ($LogPath) {",
            "        if ($FilePath -match '^msiexec(.exe)?$') {",
            "            $ArgumentList += \"/lwe `\"$LogPath`\"\"",
            "        } else {",
            "            $Process.StartInfo.RedirectStandardOutput = $true",
            "            $Process.StartInfo.RedirectStandardError = $true",
            "        }",
            "    }",
            "    if ($RunAs) {",
            "        $Process.StartInfo.UseShellExecute = $true",
            "        $Process.StartInfo.Verb = 'RunAs'",
            "    }",
            "    if ($FilePath -match '^((cmd|cscript|wscript|msiexec)(\\.exe)?|.*\\.(bat|cmd|js|vbs|wsf))$') {",
            "        $Process.StartInfo.Arguments = $ArgumentList -join ' '",
            "    } elseif ($Process.StartInfo.ArgumentList.Add) {",
            "        # ArgumentList is supported in PowerShell 6.1 and later (built on .NET Core 2.1+)",
            "        # ref-1: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.argumentlist?view=net-6.0",
            "        # ref-2: https://docs.microsoft.com/en-us/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2#net-framework-vs-net-core",
            "        $ArgumentList | ForEach-Object { $Process.StartInfo.ArgumentList.Add($_) }",
            "    } else {",
            "        # escape arguments manually in lower versions, refer to https://docs.microsoft.com/en-us/previous-versions/17w5ykft(v=vs.85)",
            "        $escapedArgs = $ArgumentList | ForEach-Object {",
            "            # escape N consecutive backslash(es), which are followed by a double quote, to 2N consecutive ones",
            "            $s = $_ -replace '(\\\\+)\"', '$1$1\"'",
            "            # escape N consecutive backslash(es), which are at the end of the string, to 2N consecutive ones",
            "            $s = $s -replace '(\\\\+)$', '$1$1'",
            "            # escape double quotes",
            "            $s = $s -replace '\"', '\\\"'",
            "            # quote the argument",
            "            \"`\"$s`\"\"",
            "        }",
            "        $Process.StartInfo.Arguments = $escapedArgs -join ' '",
            "    }",
            "    try {",
            "        [void]$Process.Start()",
            "    } catch {",
            "        if ($Activity) {",
            "            Write-Host \"error.\" -ForegroundColor DarkRed",
            "        }",
            "        Write-Host $_.Exception.Message -ForegroundColor DarkRed",
            "        return $false",
            "    }",
            "    $Process.WaitForExit()",
            "    if ($Process.ExitCode -ne 0) {",
            "        if ($ContinueExitCodes -and ($ContinueExitCodes.ContainsKey($Process.ExitCode))) {",
            "            if ($Activity) {",
            "                Write-Host \"done.\" -ForegroundColor DarkYellow",
            "            }",
            "            Write-Host $ContinueExitCodes[$Process.ExitCode] -ForegroundColor DarkYellow",
            "            return $true",
            "        } else {",
            "            if ($Activity) {",
            "                Write-Host \"error.\" -ForegroundColor DarkRed",
            "            }",
            "            Write-Host \"Exit code was $($Process.ExitCode)!\" -ForegroundColor DarkRed",
            "            return $false",
            "        }",
            "    }",
            "    if ($Activity) {",
            "        Write-Host \"done.\" -ForegroundColor Green",
            "    }",
            "    return $true",
            "}",
            "# 0x00: Disable pacman Key Refreshing to speed up the setup: https://github.com/msys2/setup-msys2/issues/45",
            "$postScript = \"$dir\\etc\\post-install\\07-pacman-key.post\"",
            "(Get-Content $postScript) -replace ' --refresh-keys', ' --version' | Set-Content $postScript",
            "# 0x01: MSYS2 Bootstrap",
            "Write-Host 'Bootstrapping MSYS2...' -ForegroundColor Yellow",
            "$msys2Pskill = \"ps -ef | grep '[?]' | awk '{print `$2}' | xargs -r kill\"",
            "Invoke-ExternalCommand2 -Path \"$dir\\msys2_shell.cmd\" -ArgumentList @('-msys2 -defterm -here -no-start -c', \"`\"$msys2Pskill`\"\") | Out-Null",
            "# 0x02: MSYS2 builtin packages update",
            "function Update-MSys2 {",
            "    # Ensure pacman mirrors have been updated",
            "    $pacmanConf = \"$dir\\etc\\pacman.conf\"",
            "    # Edit pacman.conf directly since pacman-mirrors sucks: https://github.com/msys2/MSYS2-packages/issues/1907#issuecomment-716615697",
            "    (Get-Content $pacmanConf) -replace 'Include = /etc/pacman.d/mirrorlist.mingw', 'Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/$repo/' | Set-Content $pacmanConf",
            "    (Get-Content $pacmanConf) -replace 'Include = /etc/pacman.d/mirrorlist.msys', 'Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch/' | Set-Content $pacmanConf",
            "    $logPath = \"$dir\\update.log\"",
            "    $stopSentence = 'there is nothing to do'",
            "    $cntSentence = 2",
            "    $msys2PacmanUpdate = \"pacman --ask 20 --noconfirm -Syuu --disable-download-timeout | tee -a /update.log;$msys2Pskill\"",
            "    $msys2InstallGitAndZsh = \"pacman --ask 20 --noconfirm -Sy --disable-download-timeout git zsh curl nano mingw-w64-x86_64-git-lfs | tee -a /update.log;$msys2Pskill\"",
            "    $max = 5",
            "    Write-Output \"Repeating update until there are no more updates or max $max iterations\"",
            "    Write-Output \"Pacman update logs are recorded in $logPath\"",
            "    Remove-Item $logPath -ea 0",
            "    $ErrorActionPreference = 'Continue'",
            "    while (!$done) {",
            "        ++$i",
            "        Invoke-ExternalCommand2 -Path \"$dir\\msys2_shell.cmd\" -ArgumentList @('-msys2 -defterm -here -no-start -c', \"`\"$msys2PacmanUpdate`\"\") -ContinueExitCodes @{ 1 = 'Pacman exit with code 1 but it does not matter.'} | Out-Null",
            "        $done = (Get-Content $logPath) -match $stopSentence | Measure-Object | ForEach-Object { $_.Count -ge $cntSentence }",
            "        $done = $done -or ($i -ge $max)",
            "    }",
            "    Invoke-ExternalCommand2 -Path \"$dir\\msys2_shell.cmd\" -ArgumentList @('-msys2 -defterm -here -no-start -c', \"`\"$msys2InstallGitAndZsh`\"\") -ContinueExitCodes @{ 1 = 'Pacman exit with code 1 but it does not matter.'} | Out-Null",
            "}",
            "Write-Host 'Updating MSYS2...' -ForegroundColor Yellow",
            "Update-MSys2",
            "# 0x03: Restore saved_packages.txt",
            "if (Test-Path \"$persist_dir\\home\\saved_packages.txt\") {",
            "    Write-Host \"To restore installed packages, you need to run 'pacman -S --needed `$(cat /home/saved_packages.txt)' inside MSYS2\" -ForegroundColor DarkCyan",
            "}"
        ]
    },
    "env_set": {
        "MSYS": "winsymlinks:nativestrict"
    },
    "uninstaller": {
        "script": [
            "# Insert the Invoke-ExternalCommand2 function here",
            "function Invoke-ExternalCommand2 {",
            "    [CmdletBinding(DefaultParameterSetName = \"Default\")]",
            "    [OutputType([Boolean])]",
            "    param (",
            "        [Parameter(Mandatory = $true,",
            "                   Position = 0)]",
            "        [Alias(\"Path\")]",
            "        [ValidateNotNullOrEmpty()]",
            "        [String]",
            "        $FilePath,",
            "        [Parameter(Position = 1)]",
            "        [Alias(\"Args\")]",
            "        [String[]]",
            "        $ArgumentList,",
            "        [Parameter(ParameterSetName = \"UseShellExecute\")]",
            "        [Switch]",
            "        $RunAs,",
            "        [Alias(\"Msg\")]",
            "        [String]",
            "        $Activity,",
            "        [Alias(\"cec\")]",
            "        [Hashtable]",
            "        $ContinueExitCodes,",
            "        [Parameter(ParameterSetName = \"Default\")]",
            "        [Alias(\"Log\")]",
            "        [String]",
            "        $LogPath",
            "    )",
            "    if ($Activity) {",
            "        Write-Host \"$Activity \" -NoNewline",
            "    }",
            "    $Process = New-Object System.Diagnostics.Process",
            "    $Process.StartInfo.FileName = $FilePath",
            "    $Process.StartInfo.UseShellExecute = $false",
            "    if ($LogPath) {",
            "        if ($FilePath -match '^msiexec(.exe)?$') {",
            "            $ArgumentList += \"/lwe `\"$LogPath`\"\"",
            "        } else {",
            "            $Process.StartInfo.RedirectStandardOutput = $true",
            "            $Process.StartInfo.RedirectStandardError = $true",
            "        }",
            "    }",
            "    if ($RunAs) {",
            "        $Process.StartInfo.UseShellExecute = $true",
            "        $Process.StartInfo.Verb = 'RunAs'",
            "    }",
            "    if ($FilePath -match '^((cmd|cscript|wscript|msiexec)(\\.exe)?|.*\\.(bat|cmd|js|vbs|wsf))$') {",
            "        $Process.StartInfo.Arguments = $ArgumentList -join ' '",
            "    } elseif ($Process.StartInfo.ArgumentList.Add) {",
            "        # ArgumentList is supported in PowerShell 6.1 and later (built on .NET Core 2.1+)",
            "        # ref-1: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.argumentlist?view=net-6.0",
            "        # ref-2: https://docs.microsoft.com/en-us/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2#net-framework-vs-net-core",
            "        $ArgumentList | ForEach-Object { $Process.StartInfo.ArgumentList.Add($_) }",
            "    } else {",
            "        # escape arguments manually in lower versions, refer to https://docs.microsoft.com/en-us/previous-versions/17w5ykft(v=vs.85)",
            "        $escapedArgs = $ArgumentList | ForEach-Object {",
            "            # escape N consecutive backslash(es), which are followed by a double quote, to 2N consecutive ones",
            "            $s = $_ -replace '(\\\\+)\"', '$1$1\"'",
            "            # escape N consecutive backslash(es), which are at the end of the string, to 2N consecutive ones",
            "            $s = $s -replace '(\\\\+)$', '$1$1'",
            "            # escape double quotes",
            "            $s = $s -replace '\"', '\\\"'",
            "            # quote the argument",
            "            \"`\"$s`\"\"",
            "        }",
            "        $Process.StartInfo.Arguments = $escapedArgs -join ' '",
            "    }",
            "    try {",
            "        [void]$Process.Start()",
            "    } catch {",
            "        if ($Activity) {",
            "            Write-Host \"error.\" -ForegroundColor DarkRed",
            "        }",
            "        Write-Host $_.Exception.Message -ForegroundColor DarkRed",
            "        return $false",
            "    }",
            "    $Process.WaitForExit()",
            "    if ($Process.ExitCode -ne 0) {",
            "        if ($ContinueExitCodes -and ($ContinueExitCodes.ContainsKey($Process.ExitCode))) {",
            "            if ($Activity) {",
            "                Write-Host \"done.\" -ForegroundColor DarkYellow",
            "            }",
            "            Write-Host $ContinueExitCodes[$Process.ExitCode] -ForegroundColor DarkYellow",
            "            return $true",
            "        } else {",
            "            if ($Activity) {",
            "                Write-Host \"error.\" -ForegroundColor DarkRed",
            "            }",
            "            Write-Host \"Exit code was $($Process.ExitCode)!\" -ForegroundColor DarkRed",
            "            return $false",
            "        }",
            "    }",
            "    if ($Activity) {",
            "        Write-Host \"done.\" -ForegroundColor Green",
            "    }",
            "    return $true",
            "}",
            "$msys2Pskill = \"ps -ef | grep '[?]' | awk '{print `$2}' | xargs -r kill\"",
            "# 0x00: Stop potential gpg-agent processes",
            "$args1 = \"gpgconf --kill gpg-agent;$msys2Pskill\"",
            "Invoke-ExternalCommand2 -Path \"$dir\\msys2_shell.cmd\" -ArgumentList @('-msys2 -defterm -here -no-start -c', \"`\"$args1`\"\") | Out-Null",
            "# 0x01: Generate saved_packages.txt",
            "Write-Host 'Saving MSYS2 installed packages to /home/saved_packages.txt...' -ForegroundColor Yellow",
            "$args2 = \"pacman -Qqe | xargs echo > /home/saved_packages.txt;$msys2Pskill\"",
            "Invoke-ExternalCommand2 -Path \"$dir\\msys2_shell.cmd\" -ArgumentList @('-msys2 -defterm -here -no-start -c', \"`\"$args2`\"\") | Out-Null"
        ]
    },
    "bin": [
        [
            "msys2_shell.cmd",
            "mingw64",
            "-defterm -here -no-start -mingw64"
        ],
        "git.bat"
    ],
    "shortcuts": [
        [
            "mingw64.exe",
            "MinGW64"
        ]
    ],
    "checkver": {
        "url": "https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/",
        "re": "msys2-base-x86_64-(\\d+).tar.xz",
        "reverse": true
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/msys2-base-x86_64-$version.tar.xz"
            }
        }
    }
}
