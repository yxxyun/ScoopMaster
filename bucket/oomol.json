{
    "version": "1.4.7",
    "description": "AI 可编程工作流平台 - 基于 VSCode 的工作流 IDE",
    "homepage": "https://oomol.com/zh-CN/",
    "license": {
        "identifier": "Proprietary",
        "url": "https://oomol.com/zh-CN/terms/"
    },
    "architecture": {
        "64bit": {
            "url": "https://static.oomol.com/release/stable/win32/x64/OOMOL Studio-1.4.7-2025-11-01.02.exe",
            "hash": "b9b7d002e066366bd779a3c283210e839e089cdc546e25ccf64bc99a2916c838"
        }
    },
    "innosetup": true,
    "extract_dir": "{code_GetDestDir}",
    "shortcuts": [
        [
            "OOMOL Studio.exe",
            "OOMOL Studio"
        ]
    ],
    "post_install": [
        "$persistDir = $persist_dir",
        "function Ensure-PortableDirectory { param([string]$Path) if (-not (Test-Path $Path)) { New-Item -ItemType Directory -Path $Path -Force | Out-Null } }",
        "function New-PortableSymlink { param([string]$Link,[string]$Target) if (Test-Path $Link) { Remove-Item $Link -Force -Recurse -ErrorAction SilentlyContinue } New-Item -ItemType SymbolicLink -Path $Link -Target $Target -Force | Out-Null }",
        "$homeConfig = Join-Path $persistDir 'home\\config'",
        "$homeState = Join-Path $persistDir 'home\\state'",
        "$extensionsDir = Join-Path $homeConfig 'extensions'",
        "$roamingDir = Join-Path $persistDir 'roaming'",
        "$programsDir = Join-Path $persistDir 'programs'",
        "Ensure-PortableDirectory $homeConfig",
        "Ensure-PortableDirectory $homeState",
        "Ensure-PortableDirectory $extensionsDir",
        "Ensure-PortableDirectory $roamingDir",
        "Ensure-PortableDirectory $programsDir",
        "$legacyData = Join-Path $dir 'data'",
        "if (Test-Path $legacyData) {",
        "  $legacyRoaming = Join-Path $legacyData 'user-data'",
        "  if (Test-Path $legacyRoaming) { Copy-Item \"$legacyRoaming\\*\" $roamingDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  $legacyPrograms = Join-Path $legacyData 'local-programs'",
        "  if (Test-Path $legacyPrograms) { Copy-Item \"$legacyPrograms\\*\" $programsDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  $legacyHomeState = Join-Path $legacyData '.oomol-studio'",
        "  if (Test-Path $legacyHomeState) { Copy-Item \"$legacyHomeState\\*\" $homeState -Force -Recurse -ErrorAction SilentlyContinue }",
        "  $legacyExtensions = Join-Path $legacyData 'extensions'",
        "  if (Test-Path $legacyExtensions) { Copy-Item \"$legacyExtensions\\*\" $extensionsDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $legacyData -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "$appDataPath = Join-Path $env:AppData 'OOMOL Studio'",
        "if (Test-Path $appDataPath) {",
        "  if (-not (Get-Item $appDataPath).LinkType) { Copy-Item \"$appDataPath\\*\" $roamingDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $appDataPath -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink $appDataPath $roamingDir",
        "$localProgramsPath = Join-Path $env:LocalAppData 'Programs\\oomol'",
        "if (Test-Path $localProgramsPath) {",
        "  if (-not (Get-Item $localProgramsPath).LinkType) { Copy-Item \"$localProgramsPath\\*\" $programsDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $localProgramsPath -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink $localProgramsPath $programsDir",
        "$userProfileDataPath = Join-Path $env:USERPROFILE '.oomol-studio-data'",
        "if (Test-Path $userProfileDataPath) {",
        "  if (-not (Get-Item $userProfileDataPath).LinkType) { Copy-Item \"$userProfileDataPath\\*\" $homeState -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $userProfileDataPath -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink $userProfileDataPath $homeState",
        "$userProfileStudioPath = Join-Path $env:USERPROFILE '.oomol-studio'",
        "if (Test-Path $userProfileStudioPath) {",
        "  if (-not (Get-Item $userProfileStudioPath).LinkType) { Copy-Item \"$userProfileStudioPath\\*\" $homeConfig -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $userProfileStudioPath -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink $userProfileStudioPath $homeConfig",
        "$extensionsFile = Join-Path $extensionsDir 'extensions.json'",
        "if (Test-Path $extensionsFile) {",
        "  info 'Adjusting path in extensions file...'",
        "  (Get-Content $extensionsFile) -replace '(?<=oomol(/|\\\\\\\\)).*?(?=(/|\\\\\\\\)home(/|\\\\\\\\)config(/|\\\\\\\\)extensions)', $version | Set-Content $extensionsFile",
        "}"
    ],
    "pre_uninstall": [
        "# Clean up symbolic links",
        "$appDataPath = \"$env:AppData\\OOMOL Studio\"",
        "$userProfilePath = \"$env:USERPROFILE\\.oomol-studio-data\"",
        "$userProfileStudioPath = \"$env:USERPROFILE\\.oomol-studio\"",
        "$localProgramsPath = \"$env:LocalAppData\\Programs\\oomol\"",
        "",
        "if (Test-Path $appDataPath) {",
        "  Remove-Item $appDataPath -Force",
        "  info '[Portable Mode] Removed symbolic link: %APPDATA%\\OOMOL Studio'",
        "}",
        "",
        "if (Test-Path $userProfilePath) {",
        "  Remove-Item $userProfilePath -Force",
        "  info '[Portable Mode] Removed symbolic link: ~/.oomol-studio-data'",
        "}",
        "",
        "if (Test-Path $localProgramsPath) {",
        "  Remove-Item $localProgramsPath -Force",
        "  info '[Portable Mode] Removed symbolic link: %LOCALAPPDATA%\\Programs\\oomol'",
        "}",
        "",
        "if (Test-Path $userProfileStudioPath) {",
        "  Remove-Item $userProfileStudioPath -Force",
        "  info '[Portable Mode] Removed symbolic link: ~/.oomol-studio'",
        "}",
        ""
    ],
    "persist": "data",
    "checkver": {
        "script": [
            "try {",
            "    $response = Invoke-WebRequest -Uri 'https://update.oomol.com/latest/win32-x64-user/stable' -MaximumRedirection 0 -ErrorAction Stop",
            "} catch {",
            "    if ($_.Exception.Response.StatusCode -eq 302) {",
            "        $url = $_.Exception.Response.Headers.Location",
            "    }",
            "}",
            "if ($url -match 'Studio-([0-9.]+)-') { $url }"
        ],
        "regex": "(?<url>.*Studio-(?<version>[\\d.]+)-.*\\.exe)"
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "$matchUrl"
            }
        }
    }
}
