{
    "version": "9.1.0",
    "description": "A fast and disk space efficient Node package manager.",
    "homepage": "https://pnpm.io/",
    "license": "MIT",
    "architecture": {
        "64bit": {
            "url": "https://github.com/pnpm/pnpm/releases/download/v9.1.0/pnpm-win-x64.exe#/pnpm.exe",
            "hash": "516a21abe07dab0bc5c22f5187722240777960d62bfdd6763993a8a5901cc374"
        }
    },
    "notes": [
        "To install the LTS version of Node.js, use following command:",
        "pnpm env use --global lts"
    ],
    "bin": "pnpm.exe",
    "persist": [
        "store",
        "global",
        "pnpm",
        "pnpm-state",
        "pnpm-cache"
    ],
    "post_install": [
        "# Set npm prefix to install modules inside bin and npm cache so they persist",
        "Set-Content -Value \"store-dir=$dir\\store`nstate-dir=$dir\\pnpm-state`ncache-dir=$dir\\pnpm-cache`nglobal-dir=$dir\\global`nglobal-bin-dir=$dir\\pnpm`nregistry=https://registry.npmmirror.com/`nnode-mirror:release=https://npmmirror.com/mirrors/node/`nnode-mirror:rc=https://npmmirror.com/mirrors/node-rc/`nnode-mirror:nightly=https://npmmirror.com/mirrors/node-nightly/`nupdate-notifier=false`n\" -Path \"$HOME\\.npmrc\""
    ],
    "env_add_path": "pnpm",
    "checkver": {
        "script": [
            "# Using checkver script to check through all release tags",
            "$auth = Get-GitHubToken",
            "$head = @{}",
            "if($auth) { $head.add('authorization', \"Bearer $auth\") }",
            "$url = 'https://api.github.com/repos/pnpm/pnpm/releases'",
            "$latest_ver = [Version]::new(0,0,0,0) # note: Powershell 5 does not support casting 'int' or 'float' to 'System.Version'",
            "$releases = $(Invoke-WebRequest -Headers $head $url).Content | ConvertFrom-Json",
            "$releases | ForEach-Object {",
            "    if (!($_.tag_name -match '([\\d.]+)')) { return }",
            "    if ($_.prerelease) { return }",
            "    $ver = [Version]::new($matches[1])",
            "    if ($ver -gt $latest_ver) { $latest_ver = $ver }",
            "}",
            "if ($latest_ver -eq [Version]::new(0,0,0,0)) { error \"Could not match version string in '$url'\"; continue }",
            "Write-Output $latest_ver"
        ],
        "regex": "([\\d.]+)"
    },
    "autoupdate": {
        "url": "https://github.com/pnpm/pnpm/releases/download/v$version/pnpm-win-x64.exe#/pnpm.exe"
    }
}
