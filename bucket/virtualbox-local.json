{
    "version": "7.2.2",
    "description": "Powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use.",
    "homepage": "https://www.virtualbox.org/",
    "license": "GPL-2.0-only",
    "depends": "extras/vcredist2022",
    "architecture": {
        "64bit": {
            "url": "https://download.virtualbox.org/virtualbox/7.2.2/VirtualBox-7.2.2-170484-Win.exe#/setup.exe",
            "hash": "42632e6f0b5f42b8252e91e01161fe2e0181167bc75c21b22e68e7de7c984003"
        }
    },
    "installer": {
        "script": [
            "if (!(is_admin)) { error \"$app requires admin rights to $cmd\"; break }",
            "",
            "# Stop VirtualBox services if they exist",
            "Get-Service -ErrorAction SilentlyContinue | Where-Object {$_.Name -like 'VBox*'} | Stop-Service -Force -ErrorAction SilentlyContinue",
            "",
            "# Terminate existing VirtualBox processes",
            "Get-Process -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -like '*VBox*'} | Stop-Process -Force -ErrorAction SilentlyContinue",
            "",
            "# Extract MSI files from installer",
            "Write-Host 'Extracting VirtualBox installer...' -ForegroundColor Yellow",
            "$extractArgs = @('--extract', '-path', \"$dir\", '--silent')",
            "$extractProc = Start-Process -FilePath \"$dir\\setup.exe\" -ArgumentList $extractArgs -Wait -PassThru -WindowStyle Hidden",
            "if ($extractProc.ExitCode -ne 0) {",
            "    Write-Host \"Warning: Extraction returned exit code $($extractProc.ExitCode), continuing...\" -ForegroundColor Yellow",
            "}",
            "",
            "# Wait for extraction to complete",
            "Start-Sleep -Seconds 2",
            "",
            "# Find the MSI file",
            "$msiFile = Get-ChildItem \"$dir\" -Filter '*.msi' -ErrorAction SilentlyContinue | ",
            "           Where-Object { $_.Name -like '*VirtualBox*' -and ($_.Name -like '*amd64*' -or $_.Name -like '*x64*') } | ",
            "           Select-Object -First 1",
            "",
            "if (-not $msiFile) {",
            "    # Fallback: any VirtualBox MSI",
            "    $msiFile = Get-ChildItem \"$dir\" -Filter 'VirtualBox*.msi' -ErrorAction SilentlyContinue | Select-Object -First 1",
            "}",
            "",
            "if (-not $msiFile) {",
            "    error 'Could not find VirtualBox MSI file after extraction'",
            "}",
            "",
            "Write-Host \"Found MSI: $($msiFile.Name)\" -ForegroundColor Green",
            "",
            "# Install VirtualBox using MSI",
            "Write-Host 'Installing VirtualBox...' -ForegroundColor Yellow",
            "$msiArgs = @(",
            "    '/i',",
            "    \"`\"$($msiFile.FullName)`\"\",",
            "    '/qn',",
            "    '/norestart',",
            "    \"INSTALLDIR=`\"$dir`\"\",",
            "    \"ALLUSERS=1\",",
            "    \"VBOX_INSTALLDESKTOPSHORTCUT=0\",",
            "    \"VBOX_INSTALLQUICKLAUNCHSHORTCUT=0\",",
            "    \"VBOX_REGISTERFILEEXTENSIONS=1\"",
            ")",
            "",
            "$msiProc = Start-Process -FilePath 'msiexec.exe' -ArgumentList $msiArgs -Wait -PassThru -Verb RunAs",
            "",
            "switch ($msiProc.ExitCode) {",
            "    0 { Write-Host 'VirtualBox installed successfully!' -ForegroundColor Green }",
            "    3010 { Write-Host 'VirtualBox installed successfully! (Restart required)' -ForegroundColor Green }",
            "    1603 { error 'Installation failed. Please ensure all VirtualBox processes are closed and try again.' }",
            "    1619 { error 'MSI file could not be opened. Please check permissions.' }",
            "    default { error \"Installation failed with exit code: $($msiProc.ExitCode)\" }",
            "}",
            "",
            "# Verify installation",
            "Start-Sleep -Seconds 2",
            "if (-not (Test-Path \"$dir\\VirtualBox.exe\")) {",
            "    # Check if installed to Program Files instead",
            "    $defaultPath = \"${env:ProgramFiles}\\Oracle\\VirtualBox\"",
            "    if (Test-Path \"$defaultPath\\VirtualBox.exe\") {",
            "        Write-Host 'Moving VirtualBox from Program Files to Scoop directory...' -ForegroundColor Yellow",
            "        robocopy \"$defaultPath\" \"$dir\" /E /MT:16 /R:1 /W:1 /NP /NFL /NDL",
            "        if ($LASTEXITCODE -le 7) {",
            "            Write-Host 'Files moved successfully!' -ForegroundColor Green",
            "            # Uninstall from Program Files",
            "            $uninstReg = Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*' -ErrorAction SilentlyContinue |",
            "                         Where-Object { $_.DisplayName -like '*VirtualBox*' -and $_.DisplayName -notlike '*Guest*' } |",
            "                         Select-Object -First 1",
            "            if ($uninstReg -and $uninstReg.PSChildName) {",
            "                Write-Host 'Removing Program Files installation registry...' -ForegroundColor Yellow",
            "                Start-Process -FilePath 'msiexec.exe' -ArgumentList @('/x', $uninstReg.PSChildName, '/qn') -Wait -Verb RunAs | Out-Null",
            "            }",
            "        }",
            "    } else {",
            "        error 'VirtualBox installation completed but executable not found'",
            "    }",
            "}",
            "",
            "# Cleanup installation files",
            "Write-Host 'Cleaning up installation files...' -ForegroundColor Yellow",
            "Remove-Item \"$dir\\setup.exe\" -ErrorAction SilentlyContinue",
            "Remove-Item \"$dir\\*.msi\" -ErrorAction SilentlyContinue",
            "Remove-Item \"$dir\\*.cab\" -ErrorAction SilentlyContinue",
            "",
            "# Remove desktop and start menu shortcuts created by installer",
            "Remove-Item \"$env:PUBLIC\\Desktop\\Oracle VirtualBox.lnk\" -ErrorAction SilentlyContinue",
            "Remove-Item -Recurse \"$([Environment]::GetFolderPath('commonstartmenu'))\\Programs\\Oracle VirtualBox\" -ErrorAction SilentlyContinue",
            "",
            "Write-Host 'VirtualBox installation completed!' -ForegroundColor Green"
        ]
    },
    "uninstaller": {
        "script": [
            "if (!(is_admin)) { error \"$app requires admin rights to $cmd\"; break }",
            "",
            "# Stop VirtualBox services",
            "Get-Service -ErrorAction SilentlyContinue | Where-Object {$_.Name -like 'VBox*'} | Stop-Service -Force -ErrorAction SilentlyContinue",
            "",
            "# Terminate VirtualBox processes",
            "Get-Process -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -like '*VBox*'} | Stop-Process -Force -ErrorAction SilentlyContinue",
            "",
            "# Find VirtualBox in registry",
            "Write-Host 'Searching for VirtualBox installation...' -ForegroundColor Yellow",
            "$vboxProduct = Get-ItemProperty -Path @(",
            "    'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*',",
            "    'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*'",
            ") -ErrorAction SilentlyContinue | Where-Object {",
            "    $_.DisplayName -like '*VirtualBox*' -and $_.DisplayName -notlike '*Guest*'",
            "} | Select-Object -First 1",
            "",
            "if ($vboxProduct) {",
            "    Write-Host \"Found: $($vboxProduct.DisplayName)\" -ForegroundColor Green",
            "    if ($vboxProduct.PSChildName -match '^\\{[A-F0-9-]+\\}$') {",
            "        # MSI product",
            "        $productCode = $vboxProduct.PSChildName",
            "        Write-Host \"Uninstalling MSI product: $productCode\" -ForegroundColor Cyan",
            "        $proc = Start-Process -FilePath 'msiexec.exe' -ArgumentList @('/x', $productCode, '/qn', '/norestart') -Wait -PassThru -Verb RunAs",
            "        switch ($proc.ExitCode) {",
            "            0 { Write-Host 'VirtualBox uninstalled successfully' -ForegroundColor Green }",
            "            1605 { Write-Host 'Product not found or already uninstalled' -ForegroundColor Yellow }",
            "            3010 { Write-Host 'Uninstall completed, restart required' -ForegroundColor Yellow }",
            "            default { Write-Host \"Uninstall exit code: $($proc.ExitCode)\" -ForegroundColor Yellow }",
            "        }",
            "    } elseif ($vboxProduct.UninstallString) {",
            "        # EXE uninstaller",
            "        Write-Host \"Using uninstall string: $($vboxProduct.UninstallString)\" -ForegroundColor Cyan",
            "        $uninstallCmd = $vboxProduct.UninstallString",
            "        if ($uninstallCmd -notmatch '/S|/silent|/quiet') {",
            "            $uninstallCmd += ' /S'",
            "        }",
            "        $proc = Start-Process -FilePath 'cmd.exe' -ArgumentList '/c', $uninstallCmd -Wait -PassThru -WindowStyle Hidden -Verb RunAs",
            "        if ($proc.ExitCode -eq 0) {",
            "            Write-Host 'VirtualBox uninstalled successfully' -ForegroundColor Green",
            "        } else {",
            "            Write-Host \"Uninstall exit code: $($proc.ExitCode)\" -ForegroundColor Yellow",
            "        }",
            "    }",
            "} else {",
            "    Write-Warning 'VirtualBox installation not found in registry'",
            "}"
        ]
    },
    "bin": [
        "VBoxAudioTest.exe",
        "VBoxAutostartSvc.exe",
        "VBoxBalloonCtrl.exe",
        "VBoxBugReport.exe",
        "VBoxDrvInst.exe",
        "VBoxDTrace.exe",
        "VBoxExtPackHelperApp.exe",
        "VBoxHeadless.exe",
        "VBoxManage.exe",
        "VBoxNetDHCP.exe",
        "VBoxNetNAT.exe",
        "VBoxSDS.exe",
        "VBoxSVC.exe",
        "VBoxWebSrv.exe",
        "VirtualBox.exe",
        "VirtualBoxVM.exe"
    ],
    "shortcuts": [
        [
            "VirtualBox.exe",
            "VirtualBox"
        ]
    ],
    "notes": [
        "VirtualBox requires administrator privileges for installation and first run.",
        "Hyper-V must be disabled for VirtualBox to work properly.",
        "Microsoft Visual C++ 2019+ Redistributable is required and will be automatically installed.",
        "Extension Pack can be downloaded separately from: https://www.virtualbox.org/wiki/Downloads"
    ],
    "checkver": {
        "url": "https://www.virtualbox.org/wiki/Downloads",
        "regex": "VirtualBox-([\\d.]+)-([\\d]+)-Win.exe"
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://download.virtualbox.org/virtualbox/$version/VirtualBox-$version-$match2-Win.exe#/setup.exe"
            }
        },
        "hash": {
            "url": "https://download.virtualbox.org/virtualbox/$version/SHA256SUMS",
            "regex": "([A-Fa-f\\d]{64})\\s+VirtualBox-$version-$match2-Win\\.exe"
        }
    }
}
