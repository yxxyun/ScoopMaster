{
    "version": "7.2.2",
    "description": "Powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use.",
    "homepage": "https://www.virtualbox.org/",
    "license": "GPL-2.0-only",
    "depends": "extras/vcredist2022",
    "architecture": {
        "64bit": {
            "url": "https://download.virtualbox.org/virtualbox/7.2.2/VirtualBox-7.2.2-170484-Win.exe#/setup.exe",
            "hash": "42632e6f0b5f42b8252e91e01161fe2e0181167bc75c21b22e68e7de7c984003"
        }
    },
    "installer": {
        "script": [
            "if (!(is_admin)) { error \"$app requires admin rights to $cmd\"; break }",
            "# Stop VirtualBox services",
            "Get-Service | Where-Object {$_.Name -like 'VBox*'} | Stop-Service -Force -ErrorAction SilentlyContinue",
            "# Terminate existing processes",
            "Get-Process | Where-Object {$_.ProcessName -like '*VBox*'} | Stop-Process -Force -ErrorAction SilentlyContinue",
            "# Extract installer",
            "Invoke-ExternalCommand \"$dir\\setup.exe\" -ArgumentList @('--extract', '-path', \"$dir\", '--silent') | Out-Null",
            "# Rename MSI for installation",
            "Get-ChildItem \"$dir\\VirtualBox*amd64.msi\" | Rename-Item -NewName 'setup.msi'",
            "# Install VirtualBox",
            "Start-Process msiexec -ArgumentList @('/i', \"`\"$dir\\setup.msi`\"\", '/qn', '/norestart', \"INSTALLDIR=`\"$dir`\"\") -Wait -Verb RunAs | Out-Null",
            "# Set permissions",
            "Start-Process icacls -ArgumentList @(\"`\"$dir`\"\", '/grant', 'Everyone:F', '/T') -Wait -Verb RunAs | Out-Null",
            "# Cleanup installation files",
            "Remove-Item \"$dir\\setup.exe\", \"$dir\\setup.msi\", \"$dir\\VirtualBox*.msi\", \"$dir\\common.cab\" -ErrorAction SilentlyContinue",
            "# Remove desktop and start menu shortcuts created by installer",
            "Remove-Item \"$env:PUBLIC\\Desktop\\Oracle VirtualBox.lnk\" -ErrorAction SilentlyContinue",
            "Remove-Item -Recurse \"$([Environment]::GetFolderPath('commonstartmenu'))\\Programs\\Oracle VirtualBox\" -ErrorAction SilentlyContinue"
        ]
    },
    "uninstaller": {
        "script": [
            "if (!(is_admin)) { error \"$app requires admin rights to $cmd\"; break }",
            "# Stop VirtualBox services",
            "Get-Service | Where-Object {$_.Name -like 'VBox*'} | Stop-Service -Force -ErrorAction SilentlyContinue",
            "# Terminate existing processes",
            "Get-Process | Where-Object {$_.ProcessName -like '*VBox*'} | Stop-Process -Force -ErrorAction SilentlyContinue",
            "# Search for VirtualBox installation in registry",
            "Write-Host 'Searching for VirtualBox installation...' -ForegroundColor Yellow",
            "$uninstallKeys = @(",
            "    'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall',",
            "    'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'",
            ")",
            "$vboxProduct = $null",
            "foreach ($key in $uninstallKeys) {",
            "    if (Test-Path $key) {",
            "        # Exclude Guest Additions and search only for main VirtualBox",
            "        $vboxProduct = Get-ChildItem $key | Get-ItemProperty | Where-Object {",
            "            ($_.DisplayName -like '*Oracle VirtualBox*' -or $_.DisplayName -eq 'VirtualBox') -and",
            "            $_.DisplayName -notlike '*Guest Additions*'",
            "        } | Select-Object -First 1",
            "        if ($vboxProduct) { break }",
            "    }",
            "}",
            "if (-not $vboxProduct) {",
            "    Write-Host 'VirtualBox not found in registry. Checking installation directory...' -ForegroundColor Yellow",
            "    # Check Scoop installation directory",
            "    if (Test-Path \"$dir\\VirtualBox.exe\") {",
            "        Write-Host \"Found VirtualBox in: $dir\" -ForegroundColor Green",
            "        # Try direct uninstaller",
            "        $uninstallerPath = \"$dir\\uninst.exe\"",
            "        if (Test-Path $uninstallerPath) {",
            "            Write-Host 'Running VirtualBox uninstaller...' -ForegroundColor Cyan",
            "            try {",
            "                $process = Start-Process -FilePath $uninstallerPath -ArgumentList '/S' -Wait -PassThru -Verb RunAs",
            "                if ($process.ExitCode -eq 0) {",
            "                    Write-Host 'VirtualBox uninstalled successfully' -ForegroundColor Green",
            "                } else {",
            "                    Write-Host \"Uninstaller exit code: $($process.ExitCode)\" -ForegroundColor Yellow",
            "                }",
            "                return",
            "            } catch {",
            "                Write-Host \"Uninstaller error: $($_.Exception.Message)\" -ForegroundColor Yellow",
            "            }",
            "        }",
            "    }",
            "    Write-Warning 'VirtualBox installation not found'",
            "    return",
            "}",
            "# Uninstall based on registry information",
            "Write-Host \"Found: $($vboxProduct.DisplayName)\" -ForegroundColor Green",
            "if ($vboxProduct.PSChildName -match '^\\{[A-F0-9-]+\\}$') {",
            "    # MSI product",
            "    $productCode = $vboxProduct.PSChildName",
            "    Write-Host \"Uninstalling MSI product: $productCode\" -ForegroundColor Cyan",
            "    try {",
            "        $msiArgs = @('/x', $productCode, '/qn', '/norestart')",
            "        $process = Start-Process -FilePath 'msiexec.exe' -ArgumentList $msiArgs -Wait -PassThru -Verb RunAs",
            "        switch ($process.ExitCode) {",
            "            0 { Write-Host 'VirtualBox uninstalled successfully' -ForegroundColor Green }",
            "            1605 { Write-Host 'Product not found or already uninstalled' -ForegroundColor Yellow }",
            "            3010 { Write-Host 'Uninstall completed, restart required' -ForegroundColor Yellow }",
            "            default { Write-Host \"Uninstall exit code: $($process.ExitCode)\" -ForegroundColor Yellow }",
            "        }",
            "    } catch {",
            "        error \"Failed to uninstall: $($_.Exception.Message)\"",
            "    }",
            "} elseif ($vboxProduct.UninstallString) {",
            "    # EXE uninstaller",
            "    Write-Host \"Using uninstall string: $($vboxProduct.UninstallString)\" -ForegroundColor Cyan",
            "    try {",
            "        $uninstallCmd = $vboxProduct.UninstallString",
            "        if ($uninstallCmd -notmatch '/S|/silent|/quiet') {",
            "            $uninstallCmd += ' /S'",
            "        }",
            "        $process = Start-Process -FilePath 'cmd.exe' -ArgumentList '/c', $uninstallCmd -Wait -PassThru -WindowStyle Hidden -Verb RunAs",
            "        if ($process.ExitCode -eq 0) {",
            "            Write-Host 'VirtualBox uninstalled successfully' -ForegroundColor Green",
            "        } else {",
            "            Write-Host \"Uninstall exit code: $($process.ExitCode)\" -ForegroundColor Yellow",
            "        }",
            "    } catch {",
            "        error \"Failed to execute uninstaller: $($_.Exception.Message)\"",
            "    }",
            "} else {",
            "    Write-Warning 'No uninstall method available'",
            "}"
        ]
    },
    "bin": [
        "VBoxAudioTest.exe",
        "VBoxAutostartSvc.exe",
        "VBoxBalloonCtrl.exe",
        "VBoxBugReport.exe",
        "VBoxDrvInst.exe",
        "VBoxDTrace.exe",
        "VBoxExtPackHelperApp.exe",
        "VBoxHeadless.exe",
        "VBoxManage.exe",
        "VBoxNetDHCP.exe",
        "VBoxNetNAT.exe",
        "VBoxSDS.exe",
        "VBoxSVC.exe",
        "VBoxWebSrv.exe",
        "VirtualBox.exe",
        "VirtualBoxVM.exe"
    ],
    "shortcuts": [
        [
            "VirtualBox.exe",
            "VirtualBox"
        ]
    ],
    "notes": [
        "VirtualBox requires administrator privileges for installation and first run.",
        "Hyper-V must be disabled for VirtualBox to work properly.",
        "Microsoft Visual C++ 2019+ Redistributable is required and will be automatically installed.",
        "Extension Pack can be downloaded separately from: https://www.virtualbox.org/wiki/Downloads"
    ],
    "checkver": {
        "url": "https://www.virtualbox.org/wiki/Downloads",
        "regex": "VirtualBox-([\\d.]+)-([\\d]+)-Win.exe"
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://download.virtualbox.org/virtualbox/$version/VirtualBox-$version-$revision-Win.exe#/setup.exe"
            }
        },
        "hash": {
            "url": "https://download.virtualbox.org/virtualbox/$version/SHA256SUMS",
            "regex": "([A-Fa-f\\d]{64})\\s+VirtualBox-$version-$revision-Win\\.exe"
        }
    }
}
