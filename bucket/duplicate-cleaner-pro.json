{
    "description": "Duplicate Cleaner Pro cracked version by ghxi",
    "homepage": "https://www.ghxi.com/duplicatecleaner.html",
    "license": "Unknown",
    "version": "5.20.1",
    "depends": ["vswhere", "lessmsi"],
    "url": "https://www.duplicatecleaner.com/#/homepage.html",
    "hash": "3af1a5eebbd49c7e7135deef60fdfea31fd938da56a2cc5423c63314d20be4bf",
    "real_hash": "",
    "max_retry": 5,
    "installer": {
        "script": [
            "if (-not (Get-Command AliPCS-Py -ErrorAction SilentlyContinue)) {",
            "   if (-not (Get-Command pipx -ErrorAction SilentlyContinue)) {",
            "       install_app pipx $architecture $global $suggested",
            "   }",
            "   pipx ensurepath *> $null",
            "   $env:Path = [Environment]::GetEnvironmentVariable(\"Path\", \"Machine\") + \";\" + [Environment]::GetEnvironmentVariable(\"Path\", \"User\")",
            "   if (-not (Get-Command AliPCS-Py -ErrorAction SilentlyContinue)) {",
            "       if (-not ((vswhere -products * -requires Microsoft.Component.MSBuild) -match \"instanceId\")) {",
            "           Invoke-WebRequest -Uri 'https://aka.ms/vs/17/release/vs_BuildTools.exe' -OutFile \"$env:TEMP\\vs_BuildTools.exe\"",
            "           & \"$env:TEMP\\vs_BuildTools.exe\" --passive --wait --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended",
            "       }",
            "       pipx install AliPCS-Py",
            "   }",
            "}",
            "$realHash = $manifest.real_hash",
            "$webResponse = Invoke-WebRequest $manifest.homepage",
            "$downloadURL = ($webResponse.Links | Where-Object Href -Like \"https://www.aliyundrive.com/s/*\" | Select-Object -First 1).Href",
            "$userList = AliPCS-Py ul",
            "$isLoggedIn = ($userList.Length -gt 2 + $userList.IndexOf($($userList | Where-Object { $_ -match 'Index'})))",
            "$retryCount = 0",
            "while (!$isLoggedIn) {",
            "   Write-Host \"To find the refersh token, run 'JSON.parse(localStorage.token).refresh_token' after logging in to Aliyun Drive.\"",
            "   AliPCS-Py useradd",
            "   $userList = AliPCS-Py ul",
            "   $isLoggedIn = ($userList.Length -gt 2 + $userList.IndexOf($($userList | Where-Object { $_ -match 'Index'})))",
            "   if ($isLoggedIn) { break }",
            "   $retryCount++",
            "   if ($retryCount -ge $manifest.max_retry) { break }",
            "}",
            "if (!$isLoggedIn) {",
            "   error 'Failed to login to Aliyun Drive'",
            "   break",
            "}",
            "$retryCount = 0",
            "while ($true) {",
            "   $isDirCreated = ((AliPCS-Py.exe md -S \"/Scoop\") -match \"Scoop\")",
            "   if ($isDirCreated) { break }",
            "   $retryCount++",
            "   if ($retryCount -ge $manifest.max_retry) { break }",
            "}",
            "if (!$isDirCreated) {",
            "   error 'Failed to create directory /Scoop/ in Aliyun Drive'",
            "   break",
            "}",
            "$retryCount = 0",
            "while ($true) {",
            "   AliPCS-Py save \"$downloadURL\" \"/Scoop\"",
            "   $isFileSaved = (AliPCS-Py ls \"/Scoop/Duplicate Cleaner\") -match (\"Pro_\" + \"$version\")",
            "   if ($isFileSaved) { break }",
            "   $retryCount++",
            "   if ($retryCount -ge $manifest.max_retry) { break }",
            "}",
            "if (!$isFileSaved) {",
            "   error 'Failed to save share link to Aliyun Drive'",
            "   break",
            "}",
            "$filename = (($isFileSaved | Select-Object -First 1) -split (\"(?=Duplicate)\"))[-1].Trim()",
            "$retryCount = 0",
            "while ($true) {",
            "   AliPCS-Py d -o \"$dir\" \"/Scoop/Duplicate Cleaner/$filename\"",
            "   $isFileDownloaded = (Test-Path \"$dir\\$filename\")",
            "   if ($isFileDownloaded) { break }",
            "   $retryCount++",
            "   if ($retryCount -ge $manifest.max_retry) { break }",
            "}",
            "if (!$isFileDownloaded) {",
            "   error 'Failed to download the installer from Aliyun Drive'",
            "   break",
            "}",
            "$localHash = (Get-FileHash \"$dir\\$filename\" -Algorithm SHA256).Hash",
            "if ($real_hash) {",
            "   if ($localHash -ne $realHash) {",
            "       error 'Hash value does not match'",
            "   }",
            "} else {",
            "   warn \"Hash check is not performed\"",
            "}",
            "Push-Location $dir && (7z x $filename | Out-Null) && Remove-Item $filename && Pop-Location",
            "$majorVersion = $version.Split('.') | Select-Object -First 1",
            "$installerPath = \"$dir\\Duplicate Cleaner Pro_$version\\DuplicateCleaner-Setup-${majorVersion}.msi\"",
            "$crackPath = \"$dir\\Duplicate Cleaner Pro_$version\\Crack\"",
            "lessmsi x \"$installerPath\" \"$dir\\\"",
            "Move-Item \"$dir\\SourceDir\\Duplicate Cleaner ${majorVersion}\\*\" \"$dir\"",
            "Move-Item \"$crackPath\\*\" \"$dir\" -Force",
            "Remove-Item -Recurse -Force \"$dir\\Duplicate Cleaner Pro_$version\"",
            "Remove-Item -Recurse -Force \"$dir\\SourceDir\""
        ]
    },
    "checkver": {
        "url": "https://www.ghxi.com/duplicatecleaner.html",
        "regex": "<h1[^<]*v([\\d\\.]+)[^<]*</h1>"
    },
    "autoupdate": {
        "url": "https://www.duplicatecleaner.com/#/homepage.html",
        "hash": {
            "mode": "download"
        },
        "shortcuts": [
            ["Duplicate Cleaner $majorVersion.exe", "Duplicate Cleaner"]
        ]
    },
    "shortcuts": ["Duplicate Cleaner 5.exe", "Duplicate Cleaner"]
}
