{
    "description": "Chatbox is a desktop app for GPT-4 / GPT-3.5 (OpenAI API)",
    "homepage": "https://github.com/Bin-Huang/chatbox",
    "license": "GPL-3.0-only",
    "version": "1.9.4",
    "checkver": {
        "url": "https://chatboxai.app/help-center/changelog",
        "regex": "<h2>Changelog</h2>\\s*<a(?:(?!<a|</a>).)*</a>\\s*<h3>v(?<Version>\\d+(\\.\\d+)*)( - [\\d\\.-]+)?</h3>",
        "replace": "${Version}"
    },
    "autoupdate": {
        "url": "https://chatboxai.app/install_chatbox/win64#/setup.7z",
        "hash": {
            "mode": "download"
        }
    },
    "url": "https://chatboxai.app/install_chatbox/win64#/setup.7z",
    "hash": "3406b14982089c54b8efcb0bcbe2b350db78fd632f0ce7128972a9af842e2827",
    "shortcuts": [
        [
            "Chatbox.exe",
            "ChatGPT"
        ]
    ],
    "installer": {
        "script": [
            "Move-Item -Path \"$dir\\`$PLUGINSDIR\\*\" -Destination $dir\\ -Force",
            "Move-Item -Path \"$dir\\`$R0\\*\" -Destination $dir\\ -Force",
            "Remove-Item -Path \"$dir\\`$PLUGINSDIR\" -Recurse -Force",
            "Remove-Item -Path \"$dir\\`$R0\" -Recurse -Force",
            "7z x -o\"$dir\" \"$dir\\app-64.7z\" -y | Out-Null",
            "Remove-Item -Path \"$dir\\app-64.7z\" -Force"
        ]
    },
    "pre_install": [
        "$enable_update_script = @'",
        "# Ensure the script runs with administrative privileges",
        "Function Test-Admin {",
        "    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())",
        "    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)",
        "}",
        "",
        "Function Elevate-Script {",
        "    if (-not (Test-Admin)) {",
        "        Start-Process powershell -ArgumentList \"-NoProfile -ExecutionPolicy Bypass -File `\"$($MyInvocation.MyCommand.Path)`\"\" -Verb RunAs",
        "        exit",
        "    }",
        "}",
        "",
        "# Elevate script if not running as admin",
        "Elevate-Script",
        "",
        "# Define the target directory",
        "$targetDirectory = \"$env:LOCALAPPDATA\\xyz.chatboxapp.app-updater\"",
        "",
        "# Check if the directory exists, and create it if it doesn't",
        "if (-Not (Test-Path -Path $targetDirectory)) {",
        "    Write-Host \"The directory does not exist. Creating it now...\" -ForegroundColor Yellow",
        "    New-Item -ItemType Directory -Path $targetDirectory | Out-Null",
        "    Write-Host \"Directory created: $targetDirectory\" -ForegroundColor Green",
        "}",
        "",
        "# Get the current owner of the directory",
        "$currentOwner = (Get-Acl -Path $targetDirectory).Owner",
        "",
        "# Define the permissions to apply",
        "$permissions = @(",
        "    @{",
        "        Principal = \"SYSTEM\"",
        "        Access = \"FullControl\"",
        "    },",
        "    @{",
        "        Principal = \"Administrators\"",
        "        Access = \"FullControl\"",
        "    },",
        "    @{",
        "        Principal = $currentOwner",
        "        Access = \"FullControl\"",
        "    }",
        ")",
        "",
        "# Define a function to reset and apply permissions",
        "Function Reset-And-Apply-Permissions {",
        "    param (",
        "        [string]$Path,",
        "        [array]$Permissions",
        "    )",
        "",
        "    # Get the ACL",
        "    $acl = Get-Acl -Path $Path",
        "",
        "    # Disable inheritance and remove all existing permissions",
        "    Write-Host \"Disabling inheritance and removing all existing permissions...\" -ForegroundColor Yellow",
        "    $acl.SetAccessRuleProtection($true, $false)  # Disable inheritance and remove inherited rules",
        "    $acl.Access | ForEach-Object {",
        "        $acl.RemoveAccessRuleAll($_)  # Remove all explicit permissions",
        "    }",
        "",
        "    # Apply the cleared ACL",
        "    try {",
        "        Set-Acl -Path $Path -AclObject $acl",
        "        Write-Host \"All existing permissions removed successfully.\" -ForegroundColor Green",
        "    } catch {",
        "        Write-Host \"Failed to remove existing permissions: $_\" -ForegroundColor Red",
        "        return $false",
        "    }",
        "",
        "    # Build the new ACL",
        "    Write-Host \"Building new ACL...\" -ForegroundColor Yellow",
        "    foreach ($permission in $Permissions) {",
        "        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(",
        "            $permission.Principal,",
        "            $permission.Access,",
        "            \"ContainerInherit,ObjectInherit\",",
        "            \"None\",",
        "            \"Allow\"",
        "        )",
        "        $acl.AddAccessRule($accessRule) | Out-Null",
        "        Write-Host \"Added permission for: $($permission.Principal)\" -ForegroundColor Cyan",
        "    }",
        "",
        "    # Apply the new ACL",
        "    Write-Host \"Applying new ACL to the directory...\" -ForegroundColor Yellow",
        "    try {",
        "        Set-Acl -Path $Path -AclObject $acl",
        "        Write-Host \"New ACL applied successfully.\" -ForegroundColor Green",
        "        return $true",
        "    } catch {",
        "        Write-Host \"Failed to apply new ACL: $_\" -ForegroundColor Red",
        "        return $false",
        "    }",
        "}",
        "",
        "# Define a function to print current permissions",
        "Function Print-Permissions {",
        "    param (",
        "        [string]$Path",
        "    )",
        "",
        "    Write-Host \"Current permissions for ${Path}:\" -ForegroundColor Yellow",
        "    $acl = Get-Acl -Path $Path",
        "    foreach ($access in $acl.Access) {",
        "        Write-Host \"  Principal: $($access.IdentityReference)\"",
        "        Write-Host \"  Access: $($access.FileSystemRights)\"",
        "        Write-Host \"  Inheritance: $($access.InheritanceFlags)\"",
        "        Write-Host \"  Propagation: $($access.PropagationFlags)\"",
        "        Write-Host \"  Type: $($access.AccessControlType)\"",
        "        Write-Host \"----------------------------------------\"",
        "    }",
        "}",
        "",
        "# Apply permissions",
        "Write-Host \"Resetting and applying permissions...\" -ForegroundColor Yellow",
        "$success = Reset-And-Apply-Permissions -Path $targetDirectory -Permissions $permissions",
        "",
        "if ($success) {",
        "    # Print current permissions for verification",
        "    Print-Permissions -Path $targetDirectory",
        "} else {",
        "    Write-Host \"Critical: Unable to apply permissions. Exiting.\" -ForegroundColor Red",
        "    exit 1",
        "}",
        "",
        "'@",
        "Set-Content -Path \"$dir\\enable_autoupdate.ps1\" -Value $enable_update_script",
        "$disable_update_script = @'",
        "# Ensure the script runs with administrative privileges",
        "Function Test-Admin {",
        "    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())",
        "    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)",
        "}",
        "",
        "Function Elevate-Script {",
        "    if (-not (Test-Admin)) {",
        "        Start-Process powershell -ArgumentList \"-NoProfile -ExecutionPolicy Bypass -File `\"$($MyInvocation.MyCommand.Path)`\"\" -Verb RunAs",
        "        exit",
        "    }",
        "}",
        "",
        "# Elevate script if not running as admin",
        "Elevate-Script",
        "",
        "# Define the target directory",
        "$targetDirectory = \"$env:LOCALAPPDATA\\xyz.chatboxapp.app-updater\"",
        "",
        "# Check if the directory exists, and create it if it doesn't",
        "if (-Not (Test-Path -Path $targetDirectory)) {",
        "    Write-Host \"The directory does not exist. Creating it now...\" -ForegroundColor Yellow",
        "    New-Item -ItemType Directory -Path $targetDirectory | Out-Null",
        "    Write-Host \"Directory created: $targetDirectory\" -ForegroundColor Green",
        "}",
        "",
        "# Get the current owner of the directory",
        "$currentOwner = (Get-Acl -Path $targetDirectory).Owner",
        "",
        "# Define the permissions to apply",
        "$permissions = @(",
        "    @{",
        "        Principal = \"SYSTEM\"",
        "        Access = \"ReadAndExecute\"",
        "    },",
        "    @{",
        "        Principal = \"Administrators\"",
        "        Access = \"ReadAndExecute\"",
        "    },",
        "    @{",
        "        Principal = $currentOwner",
        "        Access = \"ReadAndExecute\"",
        "    }",
        ")",
        "",
        "# Define a function to reset and apply permissions",
        "Function Reset-And-Apply-Permissions {",
        "    param (",
        "        [string]$Path,",
        "        [array]$Permissions",
        "    )",
        "",
        "    # Get the ACL",
        "    $acl = Get-Acl -Path $Path",
        "",
        "    # Disable inheritance and remove all existing permissions",
        "    Write-Host \"Disabling inheritance and removing all existing permissions...\" -ForegroundColor Yellow",
        "    $acl.SetAccessRuleProtection($true, $false)  # Disable inheritance and remove inherited rules",
        "    $acl.Access | ForEach-Object {",
        "        $acl.RemoveAccessRuleAll($_)  # Remove all explicit permissions",
        "    }",
        "",
        "    # Apply the cleared ACL",
        "    try {",
        "        Set-Acl -Path $Path -AclObject $acl",
        "        Write-Host \"All existing permissions removed successfully.\" -ForegroundColor Green",
        "    } catch {",
        "        Write-Host \"Failed to remove existing permissions: $_\" -ForegroundColor Red",
        "        return $false",
        "    }",
        "",
        "    # Build the new ACL",
        "    Write-Host \"Building new ACL...\" -ForegroundColor Yellow",
        "    foreach ($permission in $Permissions) {",
        "        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(",
        "            $permission.Principal,",
        "            $permission.Access,",
        "            \"ContainerInherit,ObjectInherit\",",
        "            \"None\",",
        "            \"Allow\"",
        "        )",
        "        $acl.AddAccessRule($accessRule) | Out-Null",
        "        Write-Host \"Added permission for: $($permission.Principal)\" -ForegroundColor Cyan",
        "    }",
        "",
        "    # Apply the new ACL",
        "    Write-Host \"Applying new ACL to the directory...\" -ForegroundColor Yellow",
        "    try {",
        "        Set-Acl -Path $Path -AclObject $acl",
        "        Write-Host \"New ACL applied successfully.\" -ForegroundColor Green",
        "        return $true",
        "    } catch {",
        "        Write-Host \"Failed to apply new ACL: $_\" -ForegroundColor Red",
        "        return $false",
        "    }",
        "}",
        "",
        "# Define a function to print current permissions",
        "Function Print-Permissions {",
        "    param (",
        "        [string]$Path",
        "    )",
        "",
        "    Write-Host \"Current permissions for ${Path}:\" -ForegroundColor Yellow",
        "    $acl = Get-Acl -Path $Path",
        "    foreach ($access in $acl.Access) {",
        "        Write-Host \"  Principal: $($access.IdentityReference)\"",
        "        Write-Host \"  Access: $($access.FileSystemRights)\"",
        "        Write-Host \"  Inheritance: $($access.InheritanceFlags)\"",
        "        Write-Host \"  Propagation: $($access.PropagationFlags)\"",
        "        Write-Host \"  Type: $($access.AccessControlType)\"",
        "        Write-Host \"----------------------------------------\"",
        "    }",
        "}",
        "",
        "# Apply permissions",
        "Write-Host \"Resetting and applying permissions...\" -ForegroundColor Yellow",
        "$success = Reset-And-Apply-Permissions -Path $targetDirectory -Permissions $permissions",
        "",
        "if ($success) {",
        "    # Print current permissions for verification",
        "    Print-Permissions -Path $targetDirectory",
        "} else {",
        "    Write-Host \"Critical: Unable to apply permissions. Exiting.\" -ForegroundColor Red",
        "    exit 1",
        "}",
        "",
        "'@",
        "Set-Content -Path \"$dir\\disable_autoupdate.ps1\" -Value $disable_update_script"
    ],
    "post_install": [
        "if (Test-Path -Path \"$persist_dir\\.use_original_icon\") {return}",
        "if (Get-Command magick -ErrorAction SilentlyContinue) {",
        "   Push-Location $dir",
        "   Invoke-WebRequest https://cdn.openai.com/brand/openai-logos.zip -OutFile openai-logos.zip",
        "   Expand-Archive openai-logos.zip -DestinationPath logos",
        "   Move-Item -Path logos\\openai-logos\\SVGs\\openai-logomark.svg -Destination logo.svg",
        "   Remove-Item -Path openai-logos.zip",
        "   Remove-Item -Path logos -Recurse",
        "   magick -size 256x256 xc:none -fill \"#1ea078\" -draw \"circle 128,128 128,0\" logo_circle.png",
        "   magick convert -density 128x128 -background transparent logo.svg -define icon:auto-resize -colors 256 logo.png",
        null,
        "   magick logo.png -resize 150x150 logo_resized.png",
        "   magick composite -gravity center logo_resized.png logo_circle.png OpenAI.ico",
        "   Remove-Item logo*",
        "   $shortcutPath = Join-Path -Path (Convert-Path([System.IO.Path]::Combine([Environment]::GetFolderPath($global ? 'CommonStartMenu':'StartMenu'), 'Programs', 'Scoop Apps'))) -ChildPath 'ChatGPT.lnk'",
        "   Copy-Item -Path $shortcutPath -Destination OriginalShortcut.lnk",
        "   $shortcut = (New-Object -ComObject WScript.Shell).CreateShortcut($shortcutPath)",
        "   $shortcut.IconLocation = (Join-Path -Path $dir -ChildPath 'OpenAI.ico')",
        "   $shortcut.Save()",
        "   Pop-Location",
        "   Write-Host 'A custom icon has been set for the shortcut. The original shortcut is saved as OriginalShortcut.lnk in the app folder.'",
        "} else {",
        "   Write-Host 'Falling back to the original icon as ImageMagick is not installed.'",
        "}"
    ],
    "notes": [
        "By default, if ImageMagick is installed, the installer will set the icon of the shortcut to the OpenAI logo.",
        "Follow the instructions in the post instalaltion log to revert to the original icon if needed.",
        "To always prefer the original icon, create a file named .use_original_icon in the persist direcotory, which usually defaults to $HOME\\scoop\\persist\\chatbox",
        "To prevent ChatBox from auto-updating, run $dir/disable_autoupdate.ps1 with administrative privileges.",
        "To re-enable auto-updating, run $dir/enable_autoupdate.ps1 with administrative privileges."
    ]
}
