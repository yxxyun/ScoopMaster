{
    "description": "An optimized BLAS library",
    "homepage": "https://github.com/OpenMathLib/OpenBLAS",
    "license": "BSD-3-Clause",
    "version": "0.3.28",
    "checkver": "github",
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://github.com/OpenMathLib/OpenBLAS/releases/download/v$version/OpenBLAS-$version-x64-64.zip"
            },
            "32bit": {
                "url": "https://github.com/OpenMathLib/OpenBLAS/releases/download/v$version/OpenBLAS-$version-x86.zip"
            }
        },
        "hash": {
            "mode": "download"
        }
    },
    "architecture": {
        "64bit": {
            "url": "https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.28/OpenBLAS-0.3.28-x64-64.zip",
            "hash": "d911aa596899da301f094fbeb07bfcd280494ef2a36cee017b224163c4b0a492"
        },
        "32bit": {
            "url": "https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.28/OpenBLAS-0.3.28-x86.zip",
            "hash": "4a14ba2b43937278616cd0883e033cc07ee1331afdd2d264ad81432bd7b16c7b"
        }
    },
    "post_install": [
        "$target = 'User'; if($global) { $target = 'Machine' }",
        "$include_paths = [environment]::getEnvironmentVariable(\"CPATH\", $target)",
        "if ($null -eq $include_paths) { $include_paths = '' }",
        "$include_paths = $include_paths.Trim(';').Split(';')",
        "$include_path = Join-Path -Path $dir -ChildPath 'include'",
        "if ($include_paths -notcontains $include_path) {",
        "   $include_paths += $include_path",
        "   [environment]::setEnvironmentVariable(\"CPATH\", $include_paths -join ';', $target)",
        "}",
        "$lib_paths = [environment]::getEnvironmentVariable(\"LIBRARY_PATH\", $target)",
        "if ($null -eq $lib_paths) { $lib_paths = '' }",
        "$lib_paths = $lib_paths.Trim(';').Split(';')",
        "$lib_path = Join-Path -Path $dir -ChildPath 'lib'",
        "if ($lib_paths -notcontains $lib_path) {",
        "   $lib_paths += $lib_path",
        "   [environment]::setEnvironmentVariable(\"LIBRARY_PATH\", $lib_paths -join ';', $target)",
        "}"
    ],
    "post_uninstall": [
        "$target = 'User'; if($global) { $target = 'Machine' }",
        "$include_paths = [environment]::getEnvironmentVariable(\"CPATH\", $target)",
        "if ($null -ne $include_paths) {",
        "   $include_paths = [System.Collections.ArrayList]$include_paths.Trim(';').Split(';')",
        "   $include_path = Join-Path -Path $dir -ChildPath 'include'",
        "   while ($include_paths -contains $include_path) {",
        "       $include_paths.Remove($include_path)",
        "   }",
        "   [environment]::setEnvironmentVariable(\"CPATH\", $include_paths -join ';', $target)",
        "}",
        "$lib_paths = [environment]::getEnvironmentVariable(\"LIBRARY_PATH\", $target)",
        "if ($null -ne $lib_paths) {",
        "   $lib_paths = [System.Collections.ArrayList]$lib_paths.Trim(';').Split(';')",
        "   $lib_path = Join-Path -Path $dir -ChildPath 'lib'",
        "   while ($lib_paths -contains $lib_path) {",
        "       $lib_paths.Remove($lib_path)",
        "   }",
        "   [environment]::setEnvironmentVariable(\"LIBRARY_PATH\", $lib_paths -join ';', $target)",
        "}"
    ]
}
